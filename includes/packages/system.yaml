system_config:

    recorder:
        db_url: mysql://homeassistant:homeassistant@core-mariadb/homeassistant?charset=utf8mb4
        auto_purge: false
        commit_interval: 60
        include:
            entities:
              - sensor.processor_use
              - sensor.processor_temperature
              - sensor.memory_use_percent
              - sensor.memory_free
              - sensor.swap_use_percent
              - sensor.swap_free
              - sensor.disk_use_percent
              - sensor.disk_free
              - sensor.maria_db_size
              - sensor.load_15m
              - sensor.strict_shutdown_sensor
              - sensor.rpi_chassis_fan_speed
              - sensor.rpi_ups_battery_voltage
              - sensor.rpi_ups_battery_capacity
              - binary_sensor.rpi_ups_battery_low
              - binary_sensor.rpi_ups_fan_status
              - binary_sensor.rpi_ups_power_status
              - binary_sensor.last_shutdown_accident
              - binary_sensor.anyone_home
              - binary_sensor.internet_connection_ping
              - group.family
              - light.rpi_chassis_fan
              - switch.rpi_ups_fan
            entity_globs:
              - binary_sensor.*_battery_low
              - sensor.*_battery
              - sensor.speedtest_*

    homeassistant:

        customize:
            binary_sensor.rpi_ups_power_status:
                device_class: plug
                friendly_name: 'RPi UPS: Зовнішнє Живлення'
            sensor.rpi_ups_battery_voltage:
                friendly_name: 'RPi UPS: Напруга Батареї'
                device_class: voltage
            sensor.rpi_ups_battery_capacity:
                friendly_name: 'RPi UPS: Рівень Заряду Батареї'
                device_class: battery
            binary_sensor.rpi_ups_battery_low:
                friendly_name: 'RPi UPS: Стан Батареї'
            switch.rpi_ups_fan:
                friendly_name: 'RPi UPS: Fan Switch'
            binary_sensor.rpi_ups_fan_status:
                friendly_name: 'RPi UPS: Fan Status'
            sensor.rpi_chassis_fan_speed:
                friendly_name: 'RPi Chassis Fan Speed'
            sensor.last_boot_custom:
                friendly_name: 'System Last Boot'
            sensor.online_custom:
                friendly_name: 'Home Assistant Uptime'
            binary_sensor.anyone_home:
                friendly_name: 'Anyone Home'
            binary_sensor.internet_connection_ping:
                friendly_name: "Інтернет З'єднання"

    input_boolean:

        disable_zone_notifications:
            name: Disable Zone Notifications
            icon: mdi:map-marker-off

        disable_startup_notifications:
            name: Disable Startup Notifications
            icon: mdi:bell-off

        disable_ups_battery_status_notifications:
            name: Disable UPS Battery Status Notifications
            icon: mdi:battery-off-outline

        disable_home_away:
            name: Disable Home/Away Automations
            icon: mdi:home-off

        enable_ecoflow_charging:
            name: Enable EcoFlow Charging
            icon: mdi:generator-portable

        enable_bluetti_charging:
            name: Enable BLUETTI Charging
            icon: mdi:generator-portable

        enable_christmas_automations:
            name: Enable Christmas Automations
            icon: mdi:pine-tree-box

        enable_manual_control_aqua_lights:
            name: Enable Manual Control of Aquarium Lights
            icon: mdi:fishbowl-outline

        enable_manual_control_ac:
            name: Enable Manual Control of A/C
            icon: mdi:air-conditioner

        enable_manual_control_heater:
            name: Enable Manual Control of Heaters
            icon: mdi:radiator

        enable_manual_control_lights:
            name: Enable Manual Control of Lights
            icon: mdi:lightbulb-group-outline

        enable_energy_counter_card:
            name: Enable Energy Counter Card
            icon: mdi:meter-electric

        enable_energy_daily_card:
            name: Enable Energy Daily Card
            icon: mdi:calendar-today

        enable_energy_weekly_card:
            name: Enable Energy Weekly Card
            icon: mdi:calendar-week

        enable_energy_monthly_card:
            name: Enable Energy Monthly Card
            icon: mdi:calendar-month

    light:
      - platform: rpi_gpio_pwm
        leds:
          - name: RPi Chassis Fan
            pin: 18
            unique_id: rpi_chassis_fan
            frequency: 65

    switch:
      - platform: rpi_gpio
        switches:
          - port: 16
            name: RPi UPS Fan
            unique_id: rpi_ups_fan
          - port: 13
            name: RPi UPS Shutdown
            unique_id: rpi_ups_shutdown

    binary_sensor:
      - platform: rpi_gpio
        sensors:
          - port: 6
            name: RPi UPS Power Status
            unique_id: rpi_ups_power_status
            invert_logic: true
        #   - port: 5
        #     name: RPi UPS Power Button
        #     unique_id: rpi_ups_power_button

    sensor:

      - platform: time_date
        display_options:
          - 'time'
          - 'date'
          - 'time_date'
    
      - platform: x750
        name: 'RPi UPS Battery'

    group:

        family:
          - person.alexus
          - person.inna
          - person.ivan
          - person.vova

    template:

      - trigger:
          - platform: homeassistant
            event: shutdown
            id: shutdown
          - platform: homeassistant
            event: start
            id: start
        sensor:
          - name: strict_shutdown_sensor
            unique_id: sensor_strict_shutdown_sensor
            state: >
              {% if trigger.id == 'start' %}
                {{iif(this.state|default('unknown') == 'shutdown','start','interrupt')}}
              {% else %}
                shutdown
              {% endif %}
            icon: >
              {% set restart = states('sensor.strict_shutdown_sensor') %}
              mdi:restart{{'-alert' if restart == 'interrupt'}}
            attributes:
              history: >
                {% set current = this.attributes.get('history',[]) %}
                {% set new = [{
                  "event": trigger.id,
                  "time": now().isoformat()}] %}
                {{(new + current)[:10]}}

      - trigger:
          - platform: state
            entity_id: sensor.count_updates_on
        binary_sensor:
          - name: all_available_updates
            state: >
                {% if states("sensor.count_updates_on") | int > 0 %}
                on
                {% else %}
                off
                {% endif %}
            attributes:
                list_entities: >
                    {% set variable = namespace(value = {}) %}
                    {% for entity in states.update if is_state(entity.entity_id, 'on') and entity.entity_id.startswith("update.") %}
                        {% set variable.value = dict(variable.value, **{entity.name: [state_attr(entity.entity_id, 'installed_version'), state_attr(entity.entity_id, 'latest_version')] }) %}
                    {% endfor %}
                    {{ variable.value |dictsort(false, 'value') }}

      - sensor:

          - name: rpi_chassis_fan_speed
            unique_id: sensor_rpi_sensor_chassis_fan_speed
            state: >-
                {% if is_state("light.rpi_chassis_fan",'off') %}
                0
                {% else %}
                {{ (state_attr('light.rpi_chassis_fan', 'brightness') / 255 * 100) | int }}
                {% endif %}
            icon: >-
                {% if   is_state("light.rpi_chassis_fan",'off') %}
                mdi:fan-off
                {% elif (states.sensor.rpi_chassis_fan_speed.state | int(0) >  0) and (states.sensor.rpi_chassis_fan_speed.state | int(0) <=  40) %}
                mdi:fan-speed-1
                {% elif (states.sensor.rpi_chassis_fan_speed.state | int(0) > 40) and (states.sensor.rpi_chassis_fan_speed.state | int(0) <=  75) %}
                mdi:fan-speed-2
                {% elif (states.sensor.rpi_chassis_fan_speed.state | int(0) > 75) and (states.sensor.rpi_chassis_fan_speed.state | int(0) <= 100) %}
                mdi:fan-speed-3
                {% else %}
                mdi:fan-alert
                {% endif %}
            unit_of_measurement: '%'

          - name: last_boot_custom
            unique_id: sensor_last_boot_custom
            icon: mdi:clock-start
            state: >
                {% set up_time =  as_timestamp(now()) - as_timestamp(states('sensor.last_boot')) %}
                {% if up_time == 0 %}
                    Just started...
                {% else %}
                    {% set minutes = (up_time // 60) | int %}
                    {% set hours = (minutes // 60) %}
                    {% set days = (hours // 24) %}
                    {% set weeks = (days // 7) %}
                    {% set minutes = (minutes % 60) %}
                    {% set hours =  (hours % 24) %}
                    {% set days = (days % 7) %}
                    {% macro phrase(value, name) %}
                        {%- set end = 's' if value > 1 else '' %}
                        {{- '{} {}{}'.format(value, name, end) if value | int > 0 else '' }}
                    {%- endmacro %}
                    {% set text = [ phrase(weeks, 'week'), phrase(days, 'day'), phrase(hours, 'hr'), phrase(minutes, 'min') ] | select('!=','') | list | join(', ') %}
                    {% set last_comma = text.rfind(',') %}
                    {% if last_comma != -1 %}
                        {% set text = text[:last_comma] + ' and' + text[last_comma + 1:] %}
                    {% endif %}
                    {{ text }}
                {% endif %}

          - name: online_custom
            unique_id: sensor_online_custom
            icon: mdi:clock-fast
            state: >
                {% set up_time =  as_timestamp(now()) - as_timestamp(states('sensor.online')) %}
                {% if up_time == 0 %}
                    Just started...
                {% else %}
                    {% set minutes = (up_time // 60) | int %}
                    {% set hours = (minutes // 60) %}
                    {% set days = (hours // 24) %}
                    {% set weeks = (days // 7) %}
                    {% set minutes = (minutes % 60) %}
                    {% set hours =  (hours % 24) %}
                    {% set days = (days % 7) %}
                    {% macro phrase(value, name) %}
                        {%- set end = 's' if value > 1 else '' %}
                        {{- '{} {}{}'.format(value, name, end) if value | int > 0 else '' }}
                    {%- endmacro %}
                    {% set text = [ phrase(weeks, 'week'), phrase(days, 'day'), phrase(hours, 'hr'), phrase(minutes, 'min') ] | select('!=','') | list | join(', ') %}
                    {% set last_comma = text.rfind(',') %}
                    {% if last_comma != -1 %}
                      {% set text = text[:last_comma] + ' and' + text[last_comma + 1:] %}
                    {% endif %}
                    {{ text }}
                {% endif %}

      - binary_sensor:

        #   - name: sensor_working_day
        #     unique_id: binary_sensor_sensor_working_day
        #     state: >
        #         {% set timeStartWorkingDay  = '10:00' %} 
        #         {% set timeStopWorkingDay   = '23:00' %} 
                
        #         {% set timeStartWeekendDay  = '11:00' %} 
        #         {% set timeStopWeekendDay   = '12:00' %} 
                
        #         {% set timeNow = now() %}
                
        #         {% if is_state('binary_sensor.workday_sensor','on') %}
        #           {% if (timeNow >= today_at(timeStartWorkingDay) and timeNow < today_at(timeStopWorkingDay)) %}
        #           on
        #           {% else %}
        #           off
        #           {% endif %}
        #         {% else %}
        #           {% if (timeNow >= today_at(timeStartWeekendDay) and timeNow < today_at(timeStopWeekendDay)) %}
        #           on
        #           {% else %}
        #           off
        #           {% endif %}
        #         {% endif %}

          - name: last_shutdown_accident
            unique_id: binary_sensor_last_shutdownt_accident
            device_class: problem
            state: "{{ is_state('sensor.strict_shutdown_sensor','interrupt') }}"

          - name: anyone_home
            unique_id: binary_sensor_anyone_home
            device_class: presence
            state: "{{ states.person | selectattr('state','eq','home') | list | count > 0 }}"

          - name: rpi_ups_fan_status
            unique_id: sensor_rpi_ups_fan_status
            state: '{{ states("switch.rpi_ups_fan") }}'
            icon: >-
                {% if is_state('binary_sensor.rpi_ups_fan_status','on') %}
                mdi:fan-plus
                {% else %}
                mdi:fan-minus
                {% endif %}
            device_class: running

          - name: rpi_ups_battery_low
            unique_id: binary_sensor_rpi_ups_battery_low
            state: >-
                {% if (states("sensor.rpi_ups_battery_capacity") | int(0) < 30) or (states("sensor.rpi_ups_battery_voltage") | float(0) < 3.5) %}
                on
                {% else %}
                off
                {% endif %}
            icon: >-
                {% if is_state("binary_sensor.rpi_ups_battery_low", "on") %}
                  {% if (states("sensor.rpi_ups_battery_voltage") | float(0) > 3.7 ) and (states("binary_sensor.rpi_ups_power_status") == "on") %}
                  mdi:battery-charging-outline
                  {% else %}
                  mdi:battery-alert-variant-outline
                  {% endif %}
                {% else %}
                  {% if (states("sensor.rpi_ups_battery_capacity") | int(0) < 50) %}
                    {% if (states("sensor.rpi_ups_battery_voltage") | float(0) > 4.0 ) and (states("binary_sensor.rpi_ups_power_status") == "on") %}
                    mdi:battery-charging-low
                    {% else %}
                    mdi:battery-low
                    {% endif %}
                  {% elif (states("sensor.rpi_ups_battery_capacity") | int(0) >=50) and (states("sensor.rpi_ups_battery_capacity") | int(0) < 80) %}
                    {% if (states("sensor.rpi_ups_battery_voltage") | float(0) > 4.0 ) and (states("binary_sensor.rpi_ups_power_status") == "on") %}
                    mdi:battery-charging-medium
                    {% else %}
                    mdi:battery-medium
                    {% endif %}
                  {% elif (states("sensor.rpi_ups_battery_capacity") | int(0) >= 80)  %}
                    {% if (states("sensor.rpi_ups_battery_voltage") | float(0) > 4.0 ) and (states("binary_sensor.rpi_ups_power_status") == "on") %}
                    mdi:battery-charging-high
                    {% else %}
                    mdi:battery-high
                    {% endif %}
                  {% endif %}
                {% endif %}
            device_class: battery

    automation:

      - alias: "System: Internet Connecton Status"
        id: system_internet_connection_status
        initial_state: true
        trigger:
          - platform: state
            entity_id: binary_sensor.internet_connection_ping
            not_from:
              - 'unknown'
              - 'unavailable'
        condition: []
        action:
          - choose:
              - conditions:
                  - condition: state
                    entity_id: binary_sensor.anyone_home
                    state: 'off'
                  - condition: state
                    entity_id: binary_sensor.internet_connection_ping
                    state: 'on'
                sequence:
                  - service: notify.alexus
                    data:
                        title: '{{"\U000026A0"}} УВАГА{{"\U0000203C"}}'
                        message: |
                            ➖➖➖➖➖➖➖
                            Інтернет з'єднання: {{"\U0001F50C"}} {% if is_state("binary_sensor.internet_connection_ping", "on") %}Відновлено{% elif is_state("binary_sensor.internet_connection_ping", "off") %}Відсутнє{% else %}Недоступне{% endif %}
                        data:
                            inline_keyboard: 
                              - "{{'\U00002139'}} Статус:/status, {{'\U0001F4D1'}} Меню:/menu"
          - choose:
              - conditions:
                  - condition: state
                    entity_id: input_boolean.disable_voice_notifications
                    state: 'off'
                  - condition: state
                    entity_id: binary_sensor.anyone_home
                    state: 'on'
                  - condition: time
                    after:  '08:00:00'
                    before: '22:00:00' 
                sequence:
                  - service: script.sonos_say
                    data: 
                        sonos_entity: media_player.sonos_living_room
                        service_name: tts.google_cloud_say
                        volume: 0.4
                        duration: '00:00:05'
                        message: >-
                            УВАГА!!! Інтернет з'єднання: {% if is_state("binary_sensor.internet_connection_ping", "on") %}Відновлено{% elif is_state("binary_sensor.internet_connection_ping", "off") %}Відсутнє{% else %}Недоступне{% endif %}!
        mode: queued

      - alias: "System: Purge DB Everyday"
        id: system_purge_db_everyday
        initial_state: true
        trigger:
          - platform: time
            at: '01:00:00'
        action:
          - service: recorder.purge
            data:
                keep_days: 3
                repack: true
        mode: single

      - alias: "System: Turn OFF switches on Shutdown"
        id: system_shutdown_turn_off_switches
        description: 'Вимкнення пристроїв при вимкненні інстансу'
        trigger:
          - platform: homeassistant
            event: shutdown
        condition: []
        action:
          - service: homeassistant.turn_off
            target:
                entity_id:
                  - switch.bedroom_air_conditioner_socket
                #   - switch.bedroom_light_switch
                  - switch.bedroom_socket_heating
                #   - switch.living_room_aquarium_main_lighting
                #   - switch.living_room_aquarium_power_strip_l1 # airation
                #   - switch.living_room_aquarium_power_strip_l5 # USB
                #   - switch.living_room_aquarium_power_strip_l2 # filtration
                  - switch.living_room_aquarium_power_strip_l3 # main light
                  - switch.living_room_aquarium_power_strip_l4 # moon light
                  - switch.living_room_air_conditioner_socket
                  - switch.living_room_socket_heating
                #   - switch.living_room_light_switch
                  - switch.kitchen_socket_heating
                #   - light.hallway_rgb_bulb
        mode: single

      - alias: "System: Turn ON Aquarium automation on Startup if RPi Power is OK"
        id: system_startup_turn_on_aqua_automations_if_rpi_power_is_ok
        description: 'Увімкнення акваріумної автоматизації при запуску HA, якщо зовнішнє живлення підключено'
        trigger:
          - platform: homeassistant
            event: start
        condition:
          - condition: state
            entity_id: binary_sensor.rpi_ups_power_status
            state: 'on'
          - condition: or
            conditions:
              - condition: state
                entity_id: automation.living_room_turn_on_main_light_by_schedule
                state: 'off'
              - condition: state
                entity_id: automation.living_room_turn_on_moonlight_by_schedule
                state: 'off'
        action:
          - service: automation.turn_on
            entity_id:
              - automation.living_room_turn_on_main_light_by_schedule
              - automation.living_room_turn_on_moonlight_by_schedule
          - service: switch.turn_on
            entity_id: switch.living_room_aquarium_main_lighting
          - delay: '00:00:03'
          - service: switch.turn_on
            entity_id: 
            #   - switch.living_room_aquarium_power_strip_l1 # airation
              - switch.living_room_aquarium_power_strip_l2 # filtration
            #   - switch.living_room_aquarium_power_strip_l3 # main light
            #   - switch.living_room_aquarium_power_strip_l4 # moon light
              - switch.living_room_aquarium_power_strip_l5 # USB air pump
        mode: single

      - alias: "System: RPi UPS Fan Speed Adjustments"
        id: system_rpi_ups_fan_speed_adjustements
        description: 'Контроль швидкості обертання вентилятора модуля RPi UPS'
        trigger:
          - platform: state
            entity_id: sensor.processor_temperature
        condition: []
        action:
          - choose:
              - conditions:
                  - condition: numeric_state
                    entity_id: sensor.processor_temperature
                    above: 60
                  - condition: state
                    entity_id: switch.rpi_ups_fan
                    state: 'off'
                sequence:
                  - action: switch.turn_on
                    entity_id: switch.rpi_ups_fan
              - conditions:
                  - condition: numeric_state
                    entity_id: sensor.processor_temperature
                    below: 55
                  - condition: state
                    entity_id: switch.rpi_ups_fan
                    state: 'on'
                sequence:
                  - action: switch.turn_off
                    entity_id: switch.rpi_ups_fan
        mode: single

      - alias: "System: RPi Chassis Fan Speed Adjustments"
        id: system_rpi_chassis_fan_speed_adjustments
        description: "Контроль швидкості обертання вентилятора корпусу"
        trigger:
          - platform: state
            entity_id: sensor.processor_temperature
        condition: []
        action:
          - variables:
                MIN_TEMP: 55
                MAX_TEMP: 80
                FAN_LOW: 20
                FAN_HIGH: 100
                FAN_OFF: 0
                FAN_MAX: 100
                TEMP: '{{ states("sensor.processor_temperature") | int }}'
          - choose:
              - conditions:
                  - condition: template
                    value_template: '{{ TEMP < MIN_TEMP }}'
                sequence: 
                  - action: light.turn_off
                    target:
                        entity_id: light.rpi_chassis_fan
              - conditions:
                  - condition: template
                    value_template: '{{ TEMP >= MAX_TEMP }}'
                sequence: 
                  - action: light.turn_on
                    data_template:
                        transition: 5
                        brightness_pct: '{{ FAN_MAX }}'
                    target:
                      entity_id: light.rpi_chassis_fan
            default:
              - action: light.turn_on
                data_template:
                    transition: 5
                    brightness_pct: >
                        {% set STEP = (FAN_HIGH - FAN_LOW) / (MAX_TEMP - MIN_TEMP) %}  
                        {% set DELTA = TEMP - MIN_TEMP %}
                        {{ (FAN_LOW + ( DELTA | int ) * STEP) | int }}
                target:
                  entity_id: light.rpi_chassis_fan
        mode: single

      - alias: "System: Action on RPi UPS Power Failure"
        id: system_rpi_ups_power_failure_action
        trigger:
          - platform: state
            entity_id: binary_sensor.rpi_ups_power_status
            from: 'on'
            to: 'off'
        condition: []
        action:
          - service: automation.turn_off
            entity_id:
              - automation.living_room_turn_on_main_light_by_schedule
              - automation.living_room_turn_on_moonlight_by_schedule
          - service: switch.turn_off
            entity_id: 
            #   - switch.living_room_aquarium_power_strip_l1 # airation
              - switch.living_room_aquarium_power_strip_l2 # filtration
              - switch.living_room_aquarium_power_strip_l3 # main light
              - switch.living_room_aquarium_power_strip_l4 # moon light
              - switch.living_room_aquarium_power_strip_l5 # USB air pump
            #   - switch.living_room_desktop_equipment_socket
            #   - switch.living_room_desktop_pc_strip_socket
        #   - delay: '00:00:03'
        #   - service: switch.turn_off
        #     entity_id: switch.living_room_aquarium_main_lighting
        mode: single

      - alias: "System: Action on RPi UPS Power Restore"
        id: system_rpi_ups_power_restore_action
        trigger:
          - platform: state
            entity_id: binary_sensor.rpi_ups_power_status
            from: 'off'
            to: 'on'
            for: '00:02:00'
        condition: []
        action:
        #   - service: switch.turn_on
        #     entity_id: switch.living_room_aquarium_main_lighting
        #   - delay: '00:00:03'
          - service: switch.turn_on
            entity_id: 
            #   - switch.living_room_aquarium_power_strip_l1 # airation
              - switch.living_room_aquarium_power_strip_l2 # filtration
            #   - switch.living_room_aquarium_power_strip_l3 # main light
            #   - switch.living_room_aquarium_power_strip_l4 # moon light
              - switch.living_room_aquarium_power_strip_l5 # USB
            #   - switch.living_room_desktop_equipment_socket
            #   - switch.living_room_desktop_pc_strip_socket
          - action: automation.turn_on
            entity_id:
              - automation.living_room_turn_on_main_light_by_schedule
              - automation.living_room_turn_on_moonlight_by_schedule
        mode: single

      - alias: "Interface: Switch Control Panels"
        id: system_interface_switch_control_panels
        description: 'Інтерфейс - перемикання панелей управління'
        trigger:
          - platform: state
            entity_id: input_boolean.enable_manual_control_heater
            to: 'on'
          - platform: state
            entity_id: input_boolean.enable_manual_control_ac
            to: 'on'
          - platform: state
            entity_id: input_boolean.enable_manual_control_lights
            to: 'on'
          - platform: state
            entity_id: input_boolean.enable_manual_control_aqua_lights
            to: 'on'
        condition: []
        action:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.entity_id == 'input_boolean.enable_manual_control_heater' }}"
                sequence:
                  - service: input_boolean.turn_off
                    entity_id: 
                        - input_boolean.enable_manual_control_lights
                        - input_boolean.enable_manual_control_aqua_lights
                        - input_boolean.enable_manual_control_ac
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.entity_id == 'input_boolean.enable_manual_control_ac' }}"
                sequence:
                  - service: input_boolean.turn_off
                    entity_id: 
                        - input_boolean.enable_manual_control_lights
                        - input_boolean.enable_manual_control_aqua_lights
                        - input_boolean.enable_manual_control_heater
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.entity_id == 'input_boolean.enable_manual_control_lights' }}"
                sequence:
                  - service: input_boolean.turn_off
                    entity_id: 
                        - input_boolean.enable_manual_control_heater
                        - input_boolean.enable_manual_control_aqua_lights
                        - input_boolean.enable_manual_control_ac
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.entity_id == 'input_boolean.enable_manual_control_aqua_lights' }}"
                sequence:
                  - service: input_boolean.turn_off
                    entity_id: 
                        - input_boolean.enable_manual_control_lights
                        - input_boolean.enable_manual_control_heater
                        - input_boolean.enable_manual_control_ac
        mode: single

      - alias: "System: Notification about finished Startup"
        id: system_startup_notification
        trigger:
          - platform: homeassistant
            event: start
        condition:
          - condition: state
            entity_id: input_boolean.disable_startup_notifications
            state: 'off'
          - condition: state
            entity_id: binary_sensor.internet_connection_ping
            state: 'on'
        action:
          - service: notify.alexus
            data:
                title: '{{"\U000026A0"}} УВАГА{{"\U0000203C"}}'
                message: |
                  ➖➖➖➖➖➖➖
                  {{'\U0001F199'}} Сервер Home Assistant було перезапущено{% if is_state('sensor.strict_shutdown_sensor','interrupt') %} після аварійної зупинки!{% endif %}{{"\U0000203C"}}
                data:
                    inline_keyboard:
                      - "{{'\U00002139'}} Статус:/status, {{'\U0001F4D1'}} Меню:/menu"
        mode: single

      - alias: "System: Notification about initiated Shutdown"
        id: system_shutdown_notification
        trigger:
          - platform: homeassistant
            event: shutdown
        condition:
          - condition: state
            entity_id: input_boolean.disable_startup_notifications
            state: 'off'
          - condition: state
            entity_id: binary_sensor.internet_connection_ping
            state: 'on'
        action:
          - service: notify.alexus
            data:
                title: '{{"\U000026A0"}} УВАГА{{"\U0000203C"}}'
                message: |
                  ➖➖➖➖➖➖➖
                  {{'\U00002139'}} Сервер Home Assistant вимикається{{"\U0000203C"}}
        mode: single

      - alias: 'System: Notification about Home Assistant Updates'
        id: system_updates_notification
        description: "Send notification about Home Assistant Updates"
        trigger:
          - platform: state
            entity_id: sensor.count_updates_on
            for:
                seconds: 10
        condition: 
          - condition: numeric_state
            entity_id: sensor.count_updates_on
            above: 0
          - condition: state
            entity_id: binary_sensor.internet_connection_ping
            state: 'on'
        action:
          - service: notify.alexus
            data:
                title: '{{"\U0001F199"}} Оновлення {{"\U0000203C"}}'
                message:  |
                    ➖➖➖➖➖➖➖
                    Доступні оновлення: {{ states('sensor.count_updates_on') }}:

                    {% for entity_name, entity_state in state_attr('binary_sensor.all_available_updates', 'list_entities')-%} - *{{ entity_name }}*: {{ '\n' }}  - Встановлено: {{ entity_state[0] }}{{ '\n' }}  - Доступно: {{ entity_state[1] }}{{ '\n\n' -}} {% endfor %}
                data:
                    inline_keyboard:
                      - "{{'\U00002139'}} Статус:/status, {{'\U0001F4D1'}} Меню:/menu"
        mode: single

      - alias: "System: Notification about RPi UPS Power Failure"
        id: system_rpi_ups_power_failure_notification
        trigger:
          - platform: state
            entity_id: binary_sensor.rpi_ups_power_status
            not_from:
              - "unknown"
              - "unavailable"
            not_to:
              - "unknown"
              - "unavailable"
        condition: []
        action:
          - choose:
              - conditions:
                  - condition: state
                    entity_id: binary_sensor.internet_connection_ping
                    state: 'on'
                sequence:
                  - service: notify.alexus
                    data:
                        title: '{{"\U000026A0"}} УВАГА{{"\U0000203C"}}'
                        message: |
                          ➖➖➖➖➖➖➖
                          Зовнішнє живлення: {{"\U0001F50C"}} {% if is_state("binary_sensor.rpi_ups_power_status", "on") %}Підключено{% elif is_state("binary_sensor.rpi_ups_power_status", "off") %}Відсутнє{% else %}Недоступне{% endif %}
                          
                          {{"\U0001F50B"}} UPS Battery Status: ({% if is_state("binary_sensor.ups_battery_low","off") %}OK{%else%}Low{{"\U0000203C"}}{%endif%}) {{ states("sensor.rpi_ups_battery_capacity") }}% / {{ states("sensor.rpi_ups_battery_voltage") }}V
                        data:
                            inline_keyboard:
                              - "{{'\U00002139'}} Статус:/status, {{'\U0001F4D1'}} Меню:/menu"
          - condition: state
            entity_id: input_boolean.disable_voice_notifications
            state: 'off'
          - condition: state
            entity_id: binary_sensor.anyone_home
            state: 'on'
          - condition: time
            after:  '08:00:00'
            before: '22:00:00'
          - service: script.sonos_say
            data: 
                sonos_entity: media_player.sonos_living_room
                service_name: tts.google_cloud_say
                volume: 0.4
                duration: '00:00:05'
                message: 'УВАГА!!! Зовнішнє живлення {% if is_state("binary_sensor.rpi_ups_power_status", "on") %}Підключено{% elif is_state("binary_sensor.rpi_ups_power_status", "off") %}Відсутнє{% else %}Недоступне{% endif %}!'
        mode: single

      - alias: "System: Notification about RPi UPS Battery Low Level"
        id: system_rpi_ups_battery_low_level_notification
        trigger:
          - platform: state
            entity_id: binary_sensor.ups_battery_low
            from: 'off'
            to: 'on'
        condition: 
          - condition: state
            entity_id: binary_sensor.ups_battery_low
            state: 'on'
        action:
          - choose:
              - conditions:
                  - condition: state
                    entity_id: binary_sensor.internet_connection_ping
                    state: 'on'
                sequence:
                  - service: notify.alexus
                    data:
                        title: '{{"\U0001F50B"}} УВАГА{{"\U0000203C"}}'
                        message: |
                          ➖➖➖➖➖➖➖
                          Низький рівень заряду батареї сервера Home Assistant: {{ states("sensor.rpi_ups_battery_capacity") }}% / {{ states("sensor.rpi_ups_battery_voltage") }}V {{"\U0000203C"}}
                          Зовнішнє живлення: {{"\U0001F50C"}} {% if is_state("binary_sensor.rpi_ups_power_status", "on") %}Підключено{% else %}Відсутнє{% endif %}
                          
                          {{"\U0000203C"}}Через деякий час сервер буде зупинено{{"\U0000203C"}}
                        data:
                            inline_keyboard:
                              - "{{'\U00002139'}} Статус:/status, {{'\U0001F4D1'}} Меню:/menu"
          - condition: state
            entity_id: input_boolean.disable_voice_notifications
            state: 'off'
          - condition: state
            entity_id: binary_sensor.anyone_home
            state: 'on'
          - condition: time
            after:  '08:00:00'
            before: '22:00:00'
          - service: script.sonos_say
            data: 
                sonos_entity: media_player.sonos_living_room
                service_name: tts.google_cloud_say
                volume: 0.4
                duration: '00:00:15'
                message: |
                  УВАГА!!!
                  Низький рівень заряду батареї сервера Home Assistant: {{ states("sensor.rpi_ups_battery_capacity") }} відсотків.
                  Зовнішнє живлення {% if is_state("binary_sensor.rpi_ups_power_status", "on") %}підключено{% else %}відсутнє{% endif %}!
                  Через деякий час сервер буде зупинено!
        mode: single

      - alias: "System: Notification about RPi UPS Battery Full Level"
        id: system_rpi_ups_battery_full_level_notification
        trigger:
          - platform: numeric_state
            entity_id: sensor.rpi_ups_battery_capacity
            above: 99
        condition: 
          - condition: state
            entity_id: binary_sensor.ups_battery_low
            state: 'off'
          - condition: state
            entity_id: input_boolean.disable_ups_battery_status_notifications
            state: 'off'
          - condition: state
            entity_id: binary_sensor.internet_connection_ping
            state: 'on'
        action:
          - service: notify.alexus
            data:
                title: '{{"\U0001F50B"}} УВАГА{{"\U0000203C"}}'
                message: |
                  ➖➖➖➖➖➖➖
                  Батарея UPS повністю заряджена: {{ states("sensor.rpi_ups_battery_capacity") }}% / {{ states("sensor.rpi_ups_battery_voltage") }}V{{"\U0000203C"}}
                  Зовнішнє живлення {% if is_state("binary_sensor.rpi_ups_power_status", "on") %}підключено{% else %}відсутнє{% endif %}!
                data:
                    inline_keyboard:
                      - "{{'\U00002139'}} Статус:/status, {{'\U0001F4D1'}} Меню:/menu"
        mode: single

      - alias: "System: RPi UPS Battery Critical Level Actions"
        description: system_rpi_ups_battery_critical_level_shutdown_host
        triggers:
          - trigger: numeric_state
            entity_id: sensor.rpi_ups_battery_capacity
            below: 25
            for:
                hours: 0
                minutes: 0
                seconds: 20
        conditions: []
        actions:
          - event: set_shutdown_reason
            event_data:
                reason: ups_charge_critical
          - action: hassio.host_shutdown
            data: {}
            enabled: true
        mode: single

      - alias: "System: Notification about changed Zone for persones"
        id: system_zone_notifications
        trigger:
          # Дом
          - platform: zone
            entity_id: 
              - person.alexus
              - person.inna
              - person.ivan
              - person.vova
            zone: zone.home
            event: enter
          - platform: zone
            entity_id: 
              - person.alexus
              - person.inna
              - person.ivan
              - person.vova
            zone: zone.home
            event: leave
            # Школа
          - platform: zone
            entity_id: 
              - person.alexus
              - person.inna
              - person.ivan
              - person.vova
            zone: zone.school
            event: enter
          - platform: zone
            entity_id: 
              - person.alexus
              - person.inna
              - person.ivan
              - person.vova
            zone: zone.school
            event: leave
            # ISD
          - platform: zone
            entity_id: 
              - person.alexus
              - person.inna
              - person.ivan
              - person.vova
            zone: zone.isd
            event: enter
          - platform: zone
            entity_id: 
              - person.alexus
              - person.inna
              - person.ivan
              - person.vova
            zone: zone.isd
            event: leave
            # Университет
          - platform: zone
            entity_id: 
              - person.alexus
              - person.inna
              - person.ivan
              - person.vova
            zone: zone.university
            event: enter
          - platform: zone
            entity_id: 
              - person.alexus
              - person.inna
              - person.ivan
              - person.vova
            zone: zone.university
            event: leave
            # Караван
          - platform: zone
            entity_id: 
              - person.alexus
              - person.inna
              - person.ivan
              - person.vova
            zone: zone.karavan
            event: enter
          - platform: zone
            entity_id: 
              - person.alexus
              - person.inna
              - person.ivan
              - person.vova
            zone: zone.karavan
            event: leave
            # METRO
          - platform: zone
            entity_id: 
              - person.alexus
              - person.inna
              - person.ivan
              - person.vova
            zone: zone.metro
            event: enter
          - platform: zone
            entity_id: 
              - person.alexus
              - person.inna
              - person.ivan
              - person.vova
            zone: zone.metro
            event: leave
            # Эпицентр
          - platform: zone
            entity_id: 
              - person.alexus
              - person.inna
              - person.ivan
              - person.vova
            zone: zone.epicentr
            event: enter
          - platform: zone
            entity_id: 
              - person.alexus
              - person.inna
              - person.ivan
              - person.vova
            zone: zone.epicentr
            event: leave
          - platform: zone
            entity_id:
              - person.alexus
              - person.inna
              - person.ivan
              - person.vova
            zone: zone.samar
            event: leave
          - platform: zone
            entity_id:
              - person.alexus
              - person.inna
              - person.ivan
              - person.vova
            zone: zone.samar
            event: enter
        condition:
          - condition: state
            entity_id: input_boolean.disable_zone_notifications
            state: 'off'
          - condition: state
            entity_id: binary_sensor.internet_connection_ping
            state: 'on'
        action:
          - service: notify.alexus
            data:
                title: '{{"\U0001F4CC"}} Зміна місцезнаходження{{"\U0000203C"}}'
                message: |
                    ➖➖➖➖➖➖➖
                    {% if (trigger.event) == "leave" %}{{ states('sensor.time') }}: {{ trigger.to_state.name }} залишив(ла) {{ trigger.zone.attributes.friendly_name }}!
                    {% else %}{{ states('sensor.time') }}: {{ trigger.to_state.name }} прибув(ла) в {{ trigger.zone.attributes.friendly_name }}!
                    {% endif %}
                data:
                    inline_keyboard:
                      - "{{'\U0001F5FA'}} Геолокація:/geo, {{'\U0001F4D1'}} Меню:/menu"
        mode: queued
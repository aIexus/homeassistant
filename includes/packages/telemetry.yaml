telemetry_config:

    homeassistant:

        customize:

            sensor.count_automations:
                friendly_name: 'Автоматизаций в системе -'
            sensor.count_automations_on:
                friendly_name: 'Активных автоматизаций -'
            sensor.count_automations_off:
                friendly_name: 'Отключенных автоматизаций -'
            sensor.count_automations_unavailable:
                friendly_name: 'Недоступных автоматизаций -'
            sensor.count_scripts:
                friendly_name: 'Скриптов в системе -'
            sensor.count_scripts_on:
                friendly_name: 'Активных скриптов -'
            sensor.count_scripts_off:
                friendly_name: 'Отключенных скриптов -'
            sensor.count_scripts_unavailable:
                friendly_name: 'Недоступных скриптов -'
            sensor.count_updates:
                friendly_name: 'Аддонов в системе -'
            sensor.count_updates_on:
                friendly_name: 'Доступно обновлений -'
            sensor.count_lights:
                friendly_name: 'Светильников в системе -'
            sensor.count_lights_on:
                friendly_name: 'Активных светильников -'
            sensor.count_lights_off:
                friendly_name: 'Отключенных светильников -'
            sensor.count_lights_unavailable:
                friendly_name: 'Недоступных светильников - '
            sensor.count_switches:
                friendly_name: 'Реле в системе -'
            sensor.count_switches_on:
                friendly_name: 'Активных реле -'
            sensor.count_switches_off:
                friendly_name: 'Отключенных реле -'
            sensor.count_switches_unavailable:
                friendly_name: 'Недоступных реле -'
            sensor.count_climate:
                friendly_name: 'Термостатов в системе -'
            sensor.climate_on:
                friendly_name: 'Активных термостатов -'
            sensor.climate_off:
                friendly_name: 'Отключенных термостатов -'
            sensor.count_climate_unavailable:
                friendly_name: 'Недоступных термостатов -'
            sensor.count_sensors:
                friendly_name: 'Сенсоров в системе -'
            sensor.count_sensors_unavailable:
                friendly_name: 'Недоступных сенсоров -'
            sensor.count_binary_sensors:
                friendly_name: 'Бинарных сенсоров в системе -'
            sensor.count_binary_sensors_unavailable:
                friendly_name: 'Недоступных бинарных сенсоров -'
            sensor.count_cameras:
                friendly_name: 'Камер в системе -'
            sensor.count_cameras_unavailable:
                friendly_name: 'Недоступных камер -'

    input_button:

        telemetry_reload:
            name: 'Обновление телеметрии'
            icon: mdi:reload

    template:

      - sensor:

          - name: count_automations
            state: >
                  {%- set domains = ['automation'] -%}
                  {%- for domain in domains -%}
                    {%- for item in states[domain] -%}
                      {% if loop.first %}
                        {{loop.length}}
                      {% endif %}
                    {%- endfor -%}
                  {%- endfor -%}
            icon: mdi:head

          - name: count_automations_on
            state: "{{states.automation | selectattr ('state', 'equalto', 'on') | list | length}}"
            icon: mdi:head-check

          - name: count_automations_off
            state: "{{states.automation | selectattr ('state', 'equalto', 'off') | list | length}}"
            icon: mdi:head-remove            

          - name: count_automations_unavailable
            state: "{{states.automation | selectattr ('state', 'equalto', 'unavailable') | list | length}}"
            icon: mdi:head-question

          - name: count_scripts
            state: >
                  {%- set domains = ['script'] -%}
                  {%- for domain in domains -%}
                    {%- for item in states[domain] -%}
                      {% if loop.first %}
                        {{loop.length}}
                      {% endif %}
                    {%- endfor -%}
                  {%- endfor -%}
            icon: mdi:file
            
          - name: count_scripts_on
            state: "{{states.script | selectattr ('state', 'equalto', 'on') | list | length}}"
            icon: mdi:file-check

          - name: count_scripts_off
            state: "{{states.script | selectattr ('state', 'equalto', 'off') | list | length}}"
            icon: mdi:file-remove            

          - name: count_scripts_unavailable
            state: "{{states.script | selectattr ('state', 'equalto', 'unavailable') | list | length}}"
            icon: mdi:file-question

          - name: count_updates
            state: >
                  {%- set domains = ['update'] -%}
                  {%- for domain in domains -%}
                    {%- for item in states[domain] -%}
                      {% if loop.first %}
                        {{loop.length}}
                      {% endif %}
                    {%- endfor -%}
                  {%- endfor -%}
            icon: mdi:monitor-dashboard
            
          - name: count_updates_on
            state: "{{states.update | selectattr ('state', 'equalto', 'on') | list | length}}"
            icon: mdi:monitor-arrow-down-variant

          - name: count_lights
            state: >
                  {%- set domains = ['light'] -%}
                  {%- for domain in domains -%}
                    {%- for item in states[domain] -%}
                      {% if loop.first %}
                        {{loop.length}}
                      {% endif %}
                    {%- endfor -%}
                  {%- endfor -%}
            icon: mdi:lightbulb-group
            
          - name: count_lights_on
            state: "{{states.light | selectattr ('state', 'equalto', 'on') | list | length}}"
            icon: mdi:lightbulb-on

          - name: count_lights_off
            state: "{{states.light | selectattr ('state', 'equalto', 'off') | list | length}}"
            icon: mdi:lightbulb

          - name: count_lights_unavailable
            state: "{{states.light | selectattr ('state', 'equalto', 'unavailable') | list | length}}"
            icon: mdi:lightbulb-question

          - name: count_switches
            state: >
                  {%- set domains = ['switch'] -%}
                  {%- for domain in domains -%}
                    {%- for item in states[domain] -%}
                      {% if loop.first %}
                        {{loop.length}}
                      {% endif %}
                    {%- endfor -%}
                  {%- endfor -%}
            icon: mdi:power
            
          - name: count_switches_on
            state: "{{states.switch | selectattr ('state', 'equalto', 'on') | list | length}}"
            icon: mdi:power-plug

          - name: count_switches_off
            state: "{{states.switch | selectattr ('state', 'equalto', 'off') | list | length}}"
            icon: mdi:power-plug-off

          - name: count_switches_unavailable
            state: "{{states.switch | selectattr ('state', 'equalto', 'unavailable') | list | length}}"
            icon: mdi:power-plug-outline

          - name: count_climate
            state: >
                  {%- set domains = ['climate'] -%}
                  {%- for domain in domains -%}
                    {%- for item in states[domain] -%}
                      {% if loop.first %}
                        {{loop.length}}
                      {% endif %}
                    {%- endfor -%}
                  {%- endfor -%}
            icon: mdi:thermostat
            
          - name: count_climate_on
            state: "{{states.climate | selectattr ('state', 'in', ['heat', 'heat_cool', 'fan_only', 'dry', 'cool', 'heat']) | list | length}}"
            icon: mdi:thermometer-plus

          - name: count_climate_off
            state: "{{states.climate | selectattr ('state', 'equalto', 'off') | list | length}}"
            icon: mdi:thermometer-minus

          - name: count_climate_unavailable
            state: "{{states.climate | selectattr ('state', 'equalto', 'unavailable') | list | length}}"
            icon: mdi:thermometer-alert

          - name: count_sensors
            state: >
                  {%- set domains = ['sensor'] -%}
                  {%- for domain in domains -%}
                    {%- for item in states[domain] -%}
                      {% if loop.first %}
                        {{loop.length}}
                      {% endif %}
                    {%- endfor -%}
                  {%- endfor -%}
            icon: mdi:eye
            
          - name: count_sensors_unavailable
            state: "{{states.sensor | selectattr ('state', 'equalto', 'unavailable') | list | length}}"
            icon: mdi:eye-off

          - name: count_binary_sensors
            state: >
                  {%- set domains = ['binary_sensor'] -%}
                  {%- for domain in domains -%}
                    {%- for item in states[domain] -%}
                      {% if loop.first %}
                        {{loop.length}}
                      {% endif %}
                    {%- endfor -%}
                  {%- endfor -%}
            icon: mdi:numeric-10-circle
            
          - name: count_binary_sensors_unavailable
            state: "{{states.binary_sensor | selectattr ('state', 'equalto', 'unavailable') | list | length}}"
            icon: mdi:alert-circle

          - name: count_cameras
            state: >
                  {%- set domains = ['camera'] -%}
                  {%- for domain in domains -%}
                    {%- for item in states[domain] -%}
                      {% if loop.first %}
                        {{loop.length}}
                      {% endif %}
                    {%- endfor -%}
                  {%- endfor -%}
            icon: mdi:cctv
            
          - name: count_cameras_unavailable
            state: "{{states.camera | selectattr ('state', 'equalto', 'unavailable') | list | length}}"
            icon: mdi:alert-circle

      - trigger:
          - platform: state
            entity_id: input_button.telemetry_reload
        sensor:
          - name: all_light_on
            state: >
                {% set variable = namespace(value = {}) %}
                {% for entity in states.light if is_state(entity.entity_id, 'on') and not (entity.entity_id.endswith("_virtual")) %}
                    {% set variable.value = dict(variable.value, **{entity.name: entity.state }) %}
                {% endfor %}
                {% if (variable.value | length) | int > 0 %}
                    {{ variable.value | length }}
                {% else %}
                    0
                {% endif %}
            attributes:
                list_entities: >
                    {% set variable = namespace(value = {}) %}
                    {% for entity in states.light if is_state(entity.entity_id, 'on') and not (entity.entity_id.endswith("_virtual")) %}
                        {% set variable.value = dict(variable.value, **{entity.name: entity.state }) %}
                    {% endfor %}
                    {{ variable.value |dictsort(false, 'value') }}
          - name: all_light_unavailable
            state: >
                {% set variable = namespace(value = {}) %}
                {% for entity in states.light if is_state(entity.entity_id, 'unavailable') %}
                    {% set variable.value = dict(variable.value, **{entity.name: entity.state }) %}
                {% endfor %}
                {% if (variable.value | length) | int > 0 %}
                    {{ variable.value | length }}
                {% else %}
                    0
                {% endif %}
            attributes:
                list_entities: >
                    {% set variable = namespace(value = {}) %}
                    {% for entity in states.light if is_state(entity.entity_id, 'unavailable') %}
                        {% set variable.value = dict(variable.value, **{entity.name: entity.state }) %}
                    {% endfor %}
                    {{ variable.value |dictsort(false, 'value') }}
          - name: all_switch_on_10
            state: >
                {% set variable = namespace(value = {}) %}
                {% for entity in states.switch if is_state(entity.entity_id, 'on') and state_attr(entity.entity_id, 'power') | int(0) > 10 %}
                    {% set variable.value = dict(variable.value, **{entity.name: state_attr(entity.entity_id, 'power') }) %}
                {% endfor %}
                {% if (variable.value | length) | int > 0 %}
                    {{ variable.value | length }}
                {% else %}
                    0
                {% endif %}
            attributes:
                list_entities: >
                    {% set variable = namespace(value = {}) %}
                    {% for entity in states.switch if is_state(entity.entity_id, 'on') and state_attr(entity.entity_id, 'power') |int(0) > 10 %}
                        {% set variable.value = dict(variable.value, **{entity.name: state_attr(entity.entity_id, 'power') }) %}
                    {% endfor %}
                    {{ variable.value |dictsort(false, 'value') }}
          - name: all_switch_unavailable
            state: >
                {% set variable = namespace(value = {}) %}
                {% for entity in states.switch if is_state(entity.entity_id, 'unavailable') %}
                    {% set variable.value = dict(variable.value, **{entity.name: entity.state }) %}
                {% endfor %}
                {% if (variable.value | length) | int > 0 %}
                    {{ variable.value | length }}
                {% else %}
                    0
                {% endif %}
            attributes:
                list_entities: >
                    {% set variable = namespace(value = {}) %}
                    {% for entity in states.switch if is_state(entity.entity_id, 'unavailable') %}
                        {% set variable.value = dict(variable.value, **{entity.name: entity.state }) %}
                    {% endfor %}
                    {{ variable.value |dictsort(false, 'value') }}
          - name: all_binary_sensor_unavailable
            state: >
                {% set variable = namespace(value = {}) %}
                {% for entity in states.binary_sensor if is_state(entity.entity_id, 'unavailable') %}
                    {% set variable.value = dict(variable.value, **{entity.name: entity.state }) %}
                {% endfor %}
                {% if (variable.value | length) | int > 0 %}
                    {{ variable.value | length }}
                {% else %}
                    0
                {% endif %}
            attributes:
                list_entities: >
                    {% set variable = namespace(value = {}) %}
                    {% for entity in states.binary_sensor if is_state(entity.entity_id, 'unavailable') %}
                        {% set variable.value = dict(variable.value, **{entity.name: entity.state }) %}
                    {% endfor %}
                    {{ variable.value |dictsort(false, 'value') }}
          - name: all_sensor_unavailable
            state: >
                {% set variable = namespace(value = {}) %}
                {% for entity in states.sensor if is_state(entity.entity_id, 'unavailable') %}
                    {% set variable.value = dict(variable.value, **{entity.name: entity.state }) %}
                {% endfor %}
                {% if (variable.value | length) | int > 0 %}
                    {{ variable.value | length }}
                {% else %}
                    0
                {% endif %}
            attributes:
                list_entities: >
                    {% set variable = namespace(value = {}) %}
                    {% for entity in states.sensor if is_state(entity.entity_id, 'unavailable') %}
                        {% set variable.value = dict(variable.value, **{entity.name: entity.state }) %}
                    {% endfor %}
                    {{ variable.value |dictsort(false, 'value') }}
          - name: motion_detected
            state: >
                {% set variable = namespace(value = {}) %}
                {% for entity in states.binary_sensor if is_state(entity.entity_id, 'on') and is_state_attr(entity.entity_id, 'device_class', 'motion') %}
                    {% set variable.value = dict(variable.value, **{entity.name: entity.state }) %}
                {% endfor %}
                {% if (variable.value | length) | int > 0 %}
                    {{ variable.value | length }}
                {% else %}
                    0
                {% endif %}
            attributes:
                list_entities: >
                    {% set variable = namespace(value = {}) %}
                    {% for entity in states.binary_sensor if is_state(entity.entity_id, 'on') and is_state_attr(entity.entity_id, 'device_class', 'motion') %}
                        {% set variable.value = dict(variable.value, **{entity.name: entity.state }) %}
                    {% endfor %}
                    {{ variable.value |dictsort(false, 'value') }}          
          - name: presence_detected
            state: >
                {% set variable = namespace(value = {}) %}
                {% for entity in states.binary_sensor if is_state(entity.entity_id, 'on') and is_state_attr(entity.entity_id, 'device_class', 'presence') %}
                    {% set variable.value = dict(variable.value, **{entity.name: entity.state }) %}
                {% endfor %}
                {% if (variable.value | length) | int > 0 %}
                    {{ variable.value | length }}
                {% else %}
                    0
                {% endif %}
            attributes:
                list_entities: >
                    {% set variable = namespace(value = {}) %}
                    {% for entity in states.binary_sensor if is_state(entity.entity_id, 'on') and is_state_attr(entity.entity_id, 'device_class', 'presence') %}
                        {% set variable.value = dict(variable.value, **{entity.name: entity.state }) %}
                    {% endfor %}
                    {{ variable.value |dictsort(false, 'value') }}
          - name: open_window
            state: >
                {% set variable = namespace(value = {}) %}
                {% for entity in states.binary_sensor if is_state(entity.entity_id, 'on') and is_state_attr(entity.entity_id, 'device_class', 'window') %}
                    {% set variable.value = dict(variable.value, **{entity.name: entity.state }) %}
                {% endfor %}
                {% if (variable.value | length) | int > 0 %}
                    {{ variable.value | length }}
                {% else %}
                    0
                {% endif %}
            attributes:
                list_entities: >
                    {% set variable = namespace(value = {}) %}
                    {% for entity in states.binary_sensor if is_state(entity.entity_id, 'on') and is_state_attr(entity.entity_id, 'device_class', 'window') %}
                        {% set variable.value = dict(variable.value, **{entity.name: entity.state }) %}
                    {% endfor %}
                    {{ variable.value |dictsort(false, 'value') }}         
          - name: open_door
            state: >
                {% set variable = namespace(value = {}) %}
                {% for entity in states.binary_sensor if is_state(entity.entity_id, 'on') and is_state_attr(entity.entity_id, 'device_class', 'door') %}
                    {% set variable.value = dict(variable.value, **{entity.name: entity.state }) %}
                {% endfor %}
                {% if (variable.value | length) | int > 0 %}
                    {{ variable.value | length }}
                {% else %}
                    0
                {% endif %}
            attributes:
                list_entities: >
                    {% set variable = namespace(value = {}) %}
                    {% for entity in states.binary_sensor if is_state(entity.entity_id, 'on') and is_state_attr(entity.entity_id, 'device_class', 'door') %}
                        {% set variable.value = dict(variable.value, **{entity.name: entity.state }) %}
                    {% endfor %}
                    {{ variable.value |dictsort(false, 'value') }}
          - name: voltage_medium
            state: >
                {% set variable = namespace(value = {}) %}
                {% set voltage = namespace(value = 0) %}
                {% for entity in states.sensor if ( is_state_attr(entity.entity_id, 'device_class', 'voltage') and 
                                                   is_state_attr(entity.entity_id, 'unit_of_measurement', 'V') and 
                                                   states(entity.entity_id) not in ['unavailable','unknown','None'] and 
                                                   not (entity.entity_id.endswith("_meter_voltage")) and
                                                   not (entity.entity_id.endswith("battery_voltage")) and
                                                   not (entity.entity_id.endswith("aquarium_main_lighting_voltage")) ) %}
                    {% set variable.value = dict(variable.value, **{entity.name: entity.state }) %}
                    {% set voltage.value = voltage.value |int + entity.state |int %}
                {% endfor %}
                {{ (voltage.value / (variable.value | length) ) |round(2) }}
            attributes:
                list_entities: >
                    {% set variable = namespace(value = {}) %}
                    {% for entity in states.sensor if ( is_state_attr(entity.entity_id, 'device_class', 'voltage') and 
                                                        is_state_attr(entity.entity_id, 'unit_of_measurement', 'V') and 
                                                        states(entity.entity_id) not in ['unavailable','unknown','None'] and 
                                                        not (entity.entity_id.endswith("_meter_voltage")) and
                                                        not (entity.entity_id.endswith("battery_voltage")) and
                                                        not (entity.entity_id.endswith("aquarium_main_lighting_voltage")) ) %}
                        {% set variable.value = dict(variable.value, **{entity.name: entity.state }) %}
                    {% endfor %}
                    {{ variable.value |dictsort(false, 'value') }} 
          - name: battery_lower_30
            state: >
                {% set variable = namespace(value = {}) %}
                {% for entity in states.sensor if is_state_attr(entity.entity_id, 'device_class', 'battery') and states(entity.entity_id) | int(0) < 30 %}
                    {% set variable.value = dict(variable.value, **{entity.name: entity.state }) %}
                {% endfor %}
                {% if (variable.value | length) | int > 0 %}
                    {{ variable.value | length }}
                {% else %}
                    0
                {% endif %}
            attributes:
                list_entities: >
                    {% set variable = namespace(value = {}) %}
                    {% for entity in states.sensor if is_state_attr(entity.entity_id, 'device_class', 'battery') and states(entity.entity_id) |int(0) < 30 %}
                        {% set variable.value = dict(variable.value, **{entity.name: entity.state }) %}
                    {% endfor %}
                    {{ variable.value |dictsort(false, 'value') }}

    automation:

      - alias: "Telegram: Telemetry"
        id: Телеметрия телеграм
        initial_state: true
        trigger: 
          - platform: event
            event_type: telegram_callback
            event_data: {}
        action:
          - choose:
              - conditions:
                  - condition: template
                    value_template: '{{ trigger.event.data.command == ''/telemetry'' }}'
                sequence:
                  - service: input_button.press
                    target:
                        entity_id: input_button.telemetry_reload
                  - delay:
                        milliseconds: 500
                  - service: telegram_bot.delete_message
                    data_template:
                        message_id: '{{ trigger.event.data.message.message_id }}'
                        chat_id: '{{ trigger.event.data.chat_id }}'
                  - service: telegram_bot.send_message
                    data:
                        target: '{{ trigger.event.data.chat_id }}'
                        message: &msg_tlmtr |
                            {{'\U00002328'}} *Телеметрия*
                            ➖➖➖➖➖➖➖➖➖➖➖➖
                            *{{'\U0001F4C5'}} {{ states('sensor.date') }} {{'\U0001F551'}} {{ states('sensor.time') }}*
                            * *
                            {{'\U000026A0'}} *Аварийные сенсоры:*
                            {{'\U0001F6AD'}} *Дым:*{% if (states('sensor.smoke_detect') | int) > 0 %} {{'\U000026A0'}} *Обнаружено*{% else %} {{'\U0001F197'}}{% endif %}, {{'\U0001F4A7'}} *Протечка:*{% if (states('sensor.water_leak_detect') | int) > 0 %} {{'\U000026A0'}} *Обнаружено*{% else %} {{'\U0001F197'}}{% endif %}
                            * *
                            {{'\U0001F527'}} *Объекты:*
                            {{'\U000026A1'}} *Напряжение в сети:* {{ states('sensor.voltage_medium') }} V
                            {{'\U0001F4A1'}} *Светильники:*{% if (states('sensor.all_light_on') | int) > 0 %} включено {{ states('sensor.all_light_on') }}{% else %} все выключены{% endif %},{% if (states('sensor.all_light_unavailable') | int) > 0 %} *Недоступно:* {{ states('sensor.all_light_unavailable') }}{% else %} {{'\U0001F197'}}{% endif %}
                            {{'\U0001F50C'}} *Реле > 10W:*{% if (states('sensor.all_switch_on_10') | int) > 0 %} активно {{ states('sensor.all_switch_on_10') }}{% else %} нет активных{% endif %},{% if (states('sensor.all_switch_unavailable') | int) > 0 %} *Недоступно:* {{ states('sensor.all_switch_unavailable') }}{% else %} {{'\U0001F197'}}{% endif %}
                            {{'\U0001F51F'}} *Бинарные сенсоры:*{% if (states('sensor.all_binary_sensor_unavailable') | int) > 0 %} недоступно - {{ states('sensor.all_binary_sensor_unavailable') }}{% else %} {{'\U0001F197'}}{% endif %}, {{'\U0001F520'}} *Сенсоры:*{% if (states('sensor.all_sensor_unavailable') | int) > 0 %} недоступно - {{ states('sensor.all_sensor_unavailable') }}{% else %} {{'\U0001F197'}}{% endif %}
                            {{'\U0001F3C3'}} *Движение:*{% if (states('sensor.motion_detected') | int) > 0 %} {{ states('sensor.motion_detected') }} датчиков{% else %} движения нет{% endif %}, {{'\U0001F3E0'}} *Присутствие:*{% if (states('sensor.presence_detected') | int) > 0 %} {{ states('sensor.presence_detected') }} датчиков{% else %} присутствия нет{% endif %}
                            {{'\U0001FA9F'}} *Окна:*{% if (states('sensor.open_window') | int) > 0 %} открыто {{ states('sensor.open_window') }}{% else %} все закрыты{% endif %}, {{'\U0001F6AA'}} *Двери:*{% if (states('sensor.open_door') | int) > 0 %} открыто {{ states('sensor.open_door') }}{% else %} все закрыты{% endif %}
                            {{'\U0001F50B'}} *Батарейки ниже 30%:*{% if (states('sensor.battery_lower_30') | int) > 0 %} - {{ states('sensor.battery_lower_30') }}{% else %} {{'\U00002705'}}{% endif %}
                        inline_keyboard: &keyb_tlmtr
                          - "{{'\U0001F4A1'}} Включенные :/list_light_on, {{'\U000026A0'}} Недоступные :/list_light_unavailable"
                          - "{{'\U000026A1'}} Более 10 W:/list_all_switch_on_10 , {{'\U0001F50C'}} Недоступные :/all_switch_unavailable"
                          - "{{'\U0001F51F'}} Бинарные сенсоры :/list_all_binary_sensor_unavailable , {{'\U0001F520'}} Сенсоры :/list_all_sensor_unavailable"
                          - "{{'\U0001F3C3'}} Движение :/list_motion_detected , {{'\U0001F3E0'}} Присутствие :/list_presence_detected"
                          - "{{'\U0001FA9F'}} Открытые окна :/list_open_window , {{'\U0001F6AA'}} Открытые двери :/list_open_door"
                          - "{{'\U0001F50B'}} Батарейки ниже 30% :/list_battery_lower_30"
                          - "{{'\U0001F4D1'}} Меню:/menu, {{'\U0001F501'}} Обновить:/telemetry"
              - conditions:
                  - condition: template
                    value_template: '{{ trigger.event.data.command == ''/list_light_on'' }}'
                sequence:
                  - service: input_button.press
                    target:
                        entity_id: input_button.telemetry_reload
                  - delay:
                        milliseconds: 500
                  - service: telegram_bot.delete_message
                    data_template:
                        message_id: '{{ trigger.event.data.message.message_id }}'
                        chat_id: '{{ trigger.event.data.chat_id }}'
                  - service: telegram_bot.send_message
                    data:
                        target: '{{ trigger.event.data.chat_id }}'
                        title: *msg_tlmtr
                        message: |
                            ➖➖➖➖➖➖➖➖➖➖➖➖
                            {% if (states('sensor.all_light_on') | int) > 0 %}{{'\U0001F4A1'}} *Включенные светильники: * {% else %}*Все светильники выключены* {% endif %}
                            * *
                            *{% for entity_name, entity_state in state_attr('sensor.all_light_on', 'list_entities')-%} - {{ entity_name }} {{ '\n' -}} {% endfor %}*
                        inline_keyboard: *keyb_tlmtr
              - conditions:
                  - condition: template
                    value_template: '{{ trigger.event.data.command == ''/list_light_unavailable'' }}'
                sequence:
                  - service: input_button.press
                    target:
                        entity_id: input_button.telemetry_reload
                  - delay:
                        milliseconds: 500
                  - service: telegram_bot.delete_message
                    data_template:
                        message_id: '{{ trigger.event.data.message.message_id }}'
                        chat_id: '{{ trigger.event.data.chat_id }}'
                  - service: telegram_bot.send_message
                    data:
                        target: '{{ trigger.event.data.chat_id }}'
                        title: *msg_tlmtr
                        message: |
                            ➖➖➖➖➖➖➖➖➖➖➖➖
                            {% if (states('sensor.all_light_unavailable') | int) > 0 %}{{"\U000026A0"}} *Недоступные светильники: * {% else %}*Все светильники доступны* {% endif %}
                            * *
                            *{% for entity_name, entity_state in state_attr('sensor.all_light_unavailable', 'list_entities')-%} - {{ entity_name }} {{ '\n' -}} {% endfor %}*
                        inline_keyboard: *keyb_tlmtr
              - conditions:
                  - condition: template
                    value_template: '{{ trigger.event.data.command == ''/list_all_switch_on_10'' }}'
                sequence:
                  - service: input_button.press
                    target:
                        entity_id: input_button.telemetry_reload
                  - delay:
                        milliseconds: 500
                  - service: telegram_bot.delete_message
                    data_template:
                        message_id: '{{ trigger.event.data.message.message_id }}'
                        chat_id: '{{ trigger.event.data.chat_id }}'
                  - service: telegram_bot.send_message
                    data:
                        target: '{{ trigger.event.data.chat_id }}'
                        title: *msg_tlmtr
                        message: |
                            ➖➖➖➖➖➖➖➖➖➖➖➖
                            {% if (states('sensor.all_switch_on_10') | int) > 0 %}{{"\U000026A1"}} *Потребление более 10W:* {% else %}*Потребление на всех реле менее 10W* {% endif %}
                            * *
                            *{% for entity_name, entity_state in state_attr('sensor.all_switch_on_10', 'list_entities')-%} - {{ entity_name }} {{ '-' }} {{ entity_state }} {{ 'W' }} {{ '\n' -}} {% endfor %}*
                        inline_keyboard: *keyb_tlmtr
              - conditions:
                  - condition: template
                    value_template: '{{ trigger.event.data.command == ''/all_switch_unavailable'' }}'
                sequence:
                  - service: input_button.press
                    target:
                        entity_id: input_button.telemetry_reload
                  - delay:
                        milliseconds: 500
                  - service: telegram_bot.delete_message
                    data_template:
                        message_id: '{{ trigger.event.data.message.message_id }}'
                        chat_id: '{{ trigger.event.data.chat_id }}'
                  - service: telegram_bot.send_message
                    data:
                        target: '{{ trigger.event.data.chat_id }}'
                        title: *msg_tlmtr
                        message: |
                            ➖➖➖➖➖➖➖➖➖➖➖➖
                            {% if (states('sensor.all_switch_unavailable') | int) > 0 %}{{"\U0001F50C"}} *Недоступные реле: * {% else %}*Все реле доступны* {% endif %}
                            *{% for entity_name, entity_state in state_attr('sensor.all_switch_unavailable', 'list_entities')-%} - {{ entity_name }} {{ '\n' -}} {% endfor %}*
                            * *
                        inline_keyboard: *keyb_tlmtr
              - conditions:
                  - condition: template
                    value_template: '{{ trigger.event.data.command == ''/list_all_binary_sensor_unavailable'' }}'
                sequence:
                  - service: input_button.press
                    target:
                        entity_id: input_button.telemetry_reload
                  - delay:
                        milliseconds: 500
                  - service: telegram_bot.delete_message
                    data_template:
                        message_id: '{{ trigger.event.data.message.message_id }}'
                        chat_id: '{{ trigger.event.data.chat_id }}'
                  - service: telegram_bot.send_message
                    data:
                        target: '{{ trigger.event.data.chat_id }}'
                        title: *msg_tlmtr
                        message: |
                            ➖➖➖➖➖➖➖➖➖➖➖➖
                            {% if (states('sensor.all_binary_sensor_unavailable') | int) > 0 %}{{"\U0001F50C"}} *Недоступные бинарные сенсоры: * {% else %}*Все бинарные сенсоры доступны* {% endif %}
                            *{% for entity_name, entity_state in state_attr('sensor.all_binary_sensor_unavailable', 'list_entities')-%} - {{ entity_name }} {{ '\n' -}} {% endfor %}*
                            * *
                        inline_keyboard: *keyb_tlmtr
              - conditions:
                  - condition: template
                    value_template: '{{ trigger.event.data.command == ''/list_all_sensor_unavailable'' }}'
                sequence:
                  - service: input_button.press
                    target:
                        entity_id: input_button.telemetry_reload
                  - delay:
                        milliseconds: 500
                  - service: telegram_bot.delete_message
                    data_template:
                        message_id: '{{ trigger.event.data.message.message_id }}'
                        chat_id: '{{ trigger.event.data.chat_id }}'
                  - service: telegram_bot.send_message
                    data:
                        target: '{{ trigger.event.data.chat_id }}'
                        title: *msg_tlmtr
                        message: |
                            ➖➖➖➖➖➖➖➖➖➖➖➖
                            {% if (states('sensor.all_sensor_unavailable') | int) > 0 %}{{"\U0001F50C"}} *Недоступные сенсоры: * {% else %}*Все сенсоры доступны* {% endif %}
                            *{% for entity_name, entity_state in state_attr('sensor.all_sensor_unavailable', 'list_entities')-%} - {{ entity_name }} {{ '\n' -}} {% endfor %}*
                            * *
                        inline_keyboard: *keyb_tlmtr
              - conditions:
                  - condition: template
                    value_template: '{{ trigger.event.data.command == ''/list_motion_detected'' }}'
                sequence:
                  - service: input_button.press
                    target:
                        entity_id: input_button.telemetry_reload
                  - delay:
                        milliseconds: 500
                  - service: telegram_bot.delete_message
                    data_template:
                        message_id: '{{ trigger.event.data.message.message_id }}'
                        chat_id: '{{ trigger.event.data.chat_id }}'
                  - service: telegram_bot.send_message
                    data:
                        target: '{{ trigger.event.data.chat_id }}'
                        title: *msg_tlmtr
                        message: |
                            ➖➖➖➖➖➖➖➖➖➖➖➖
                            {% if (states('sensor.motion_detected') | int) > 0 %}{{"\U0001F3C3"}} *Движение: * {% else %}*Движение не обнаружено* {% endif %}
                            * *
                            *{% for entity_name, entity_state in state_attr('sensor.motion_detected', 'list_entities')-%} - {{ entity_name }} {{ '\n' -}} {% endfor %}*
                        inline_keyboard: *keyb_tlmtr
              - conditions:
                  - condition: template
                    value_template: '{{ trigger.event.data.command == ''/list_presence_detected'' }}'
                sequence:
                  - service: input_button.press
                    target:
                        entity_id: input_button.telemetry_reload
                  - delay:
                        milliseconds: 500
                  - service: telegram_bot.delete_message
                    data_template:
                        message_id: '{{ trigger.event.data.message.message_id }}'
                        chat_id: '{{ trigger.event.data.chat_id }}'
                  - service: telegram_bot.send_message
                    data:
                        target: '{{ trigger.event.data.chat_id }}'
                        title: *msg_tlmtr
                        message: |
                            ➖➖➖➖➖➖➖➖➖➖➖➖
                            {% if (states('sensor.presence_detected') | int) > 0 %}{{"\U0001F3E0"}} *Присутствие: * {% else %}*Присутствия не обнаружено* {% endif %}
                            * *
                            *{% for entity_name, entity_state in state_attr('sensor.presence_detected', 'list_entities')-%} - {{ entity_name }} {{ '\n' -}} {% endfor %}*
                        inline_keyboard: *keyb_tlmtr
              - conditions:
                  - condition: template
                    value_template: '{{ trigger.event.data.command == ''/list_open_window'' }}'
                sequence:
                  - service: input_button.press
                    target:
                        entity_id: input_button.telemetry_reload
                  - delay:
                        milliseconds: 500
                  - service: telegram_bot.delete_message
                    data_template:
                        message_id: '{{ trigger.event.data.message.message_id }}'
                        chat_id: '{{ trigger.event.data.chat_id }}'
                  - service: telegram_bot.send_message
                    data:
                        target: '{{ trigger.event.data.chat_id }}'
                        title: *msg_tlmtr
                        message: |
                            ➖➖➖➖➖➖➖➖➖➖➖➖
                            {% if (states('sensor.open_window') | int) > 0 %}{{"\U0001FA9F"}} *Открытые окна: * {% else %}*Все окна закрыты* {% endif %}
                            * *
                            *{% for entity_name, entity_state in state_attr('sensor.open_window', 'list_entities')-%} - {{ entity_name }} {{ '\n' -}} {% endfor %}*
                        inline_keyboard: *keyb_tlmtr
              - conditions:
                  - condition: template
                    value_template: '{{ trigger.event.data.command == ''/list_open_door'' }}'
                sequence:
                  - service: input_button.press
                    target:
                        entity_id: input_button.telemetry_reload
                  - delay:
                        milliseconds: 500
                  - service: telegram_bot.delete_message
                    data_template:
                        message_id: '{{ trigger.event.data.message.message_id }}'
                        chat_id: '{{ trigger.event.data.chat_id }}'
                  - service: telegram_bot.send_message
                    data:
                        target: '{{ trigger.event.data.chat_id }}'
                        title: *msg_tlmtr
                        message: |
                            ➖➖➖➖➖➖➖➖➖➖➖➖
                            {% if (states('sensor.open_door') | int) > 0 %}{{"\U0001F6AA"}} *Открытые двери: * {% else %}*Все двери закрыты* {% endif %}
                            * *
                            *{% for entity_name, entity_state in state_attr('sensor.open_door', 'list_entities')-%} - {{ entity_name }} {{ '\n' -}} {% endfor %}*
                        inline_keyboard: *keyb_tlmtr
              - conditions:
                  - condition: template
                    value_template: '{{ trigger.event.data.command == ''/list_battery_lower_30'' }}'
                sequence:
                  - service: input_button.press
                    target:
                        entity_id: input_button.telemetry_reload
                  - delay:
                      milliseconds: 500
                  - service: telegram_bot.delete_message
                    data_template:
                      message_id: '{{ trigger.event.data.message.message_id }}'
                      chat_id: '{{ trigger.event.data.chat_id }}'
                  - service: telegram_bot.send_message
                    data:
                      target: '{{ trigger.event.data.chat_id }}'
                      title: *msg_tlmtr
                      message: |
                            ➖➖➖➖➖➖➖➖➖➖➖➖
                            {% if (states('sensor.battery_lower_30') | int) > 0 %}{{"\U0001F50B"}} *Разряжающиеся батарейки: * {% else %}*Все батарейки в порядке* {% endif %}
                            * *
                            *{% for entity_name, entity_state in state_attr('sensor.battery_lower_30', 'list_entities')-%} - {{ entity_name }} {{ '-' }} {{ entity_state }} {{ '%' }} {{ '\n' -}} {% endfor %}*
                      inline_keyboard: *keyb_tlmtr

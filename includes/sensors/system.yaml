
    - platform: uptime
      name: online

    - platform: time_date
      display_options:
        - 'time'
        - 'date'
        - 'time_date'

    - platform: systemmonitor
      resources:
        - type: processor_use
        - type: processor_temperature
        - type: disk_use_percent
          arg: /
        - type: disk_use
        - type: disk_free
          arg: /
        - type: memory_use_percent
        - type: memory_use
        - type: memory_free
        - type: swap_use_percent
        - type: swap_use
        - type: swap_free
        - type: load_1m
        - type: load_5m
        - type: load_15m
        - type: network_in
          arg: eth0
        - type: network_out
          arg: eth0
        - type: network_in
          arg: wlan0
        - type: network_out
          arg: wlan0
        - type: last_boot

    - platform: file
      name: file_battery_voltage
      scan_interval: '00:02:00'
      file_path: /config/files/ups_battery_voltage.txt


    - platform: file
      name: file_battery_capacity
      scan_interval: '00:03:00'
      file_path: /config/files/ups_battery_capacity.txt

    - platform: file
      name: file_ac_power_status
      scan_interval: '00:00:30'
      file_path: /config/files/rpi_ac_power_status.txt

    - platform: template
      sensors:
        ups_battery_voltage:
            friendly_name: "Напряжение на батареи UPS"
            unit_of_measurement: 'V'
            value_template: '{{ states("sensor.file_battery_voltage") }}'
            device_class: voltage
        ups_battery_capacity:
            friendly_name: "Уровень заряда батареи UPS"
            unit_of_measurement: '%'
            value_template: '{{ states("sensor.file_battery_capacity") }}'
            device_class: battery
        last_boot_custom:
            friendly_name: "System Last Boot"
            icon_template: mdi:clock-start
            value_template: >
                {% set up_time =  as_timestamp(now()) - as_timestamp(states('sensor.last_boot')) %}
                {% if up_time == 0 %}
                    Just started...
                {% else %}
                    {% set minutes = (up_time // 60) | int %}
                    {% set hours = (minutes // 60) %}
                    {% set days = (hours // 24) %}
                    {% set weeks = (days // 7) %}
                    {% set minutes = (minutes % 60) %}
                    {% set hours =  (hours % 24) %}
                    {% set days = (days % 7) %}
                    {% macro phrase(value, name) %}
                        {%- set end = 's' if value > 1 else '' %}
                        {{- '{} {}{}'.format(value, name, end) if value | int > 0 else '' }}
                    {%- endmacro %}
                    {% set text = [ phrase(weeks, 'week'), phrase(days, 'day'), phrase(hours, 'hr'), phrase(minutes, 'min') ] | select('!=','') | list | join(', ') %}
                    {% set last_comma = text.rfind(',') %}
                    {% if last_comma != -1 %}
                        {% set text = text[:last_comma] + ' and' + text[last_comma + 1:] %}
                    {% endif %}
                    {{ text }}
                {% endif %}
        online_custom:
            friendly_name: "Home Assistant Uptime"
            icon_template: mdi:clock-fast
            value_template: >
                {% set up_time =  as_timestamp(now()) - as_timestamp(states('sensor.online')) %}
                {% if up_time == 0 %}
                    Just started...
                {% else %}
                    {% set minutes = (up_time // 60) | int %}
                    {% set hours = (minutes // 60) %}
                    {% set days = (hours // 24) %}
                    {% set weeks = (days // 7) %}
                    {% set minutes = (minutes % 60) %}
                    {% set hours =  (hours % 24) %}
                    {% set days = (days % 7) %}
                    {% macro phrase(value, name) %}
                        {%- set end = 's' if value > 1 else '' %}
                        {{- '{} {}{}'.format(value, name, end) if value | int > 0 else '' }}
                    {%- endmacro %}
                    {% set text = [ phrase(weeks, 'week'), phrase(days, 'day'), phrase(hours, 'hr'), phrase(minutes, 'min') ] | select('!=','') | list | join(', ') %}
                    {% set last_comma = text.rfind(',') %}
                    {% if last_comma != -1 %}
                      {% set text = text[:last_comma] + ' and' + text[last_comma + 1:] %}
                    {% endif %}
                    {{ text }}
                {% endif %}
